type Query {
  buttonComponents: [ButtonComponent]
  contentBoxComponents: [ContentBoxComponent]
  dividerComponents: [DividerComponent]
  headlineComponents: [HeadlineComponent]
  iconComponents: [IconComponent]
  lightboxLazyImageComponents: [LightboxLazyImageComponent]
  linkButtonComponents: [LinkButtonComponent]
  pictureComponents: [PictureComponent]
  containerComponents: [Container]
  sectionComponents: [SectionComponent]
  autoplayComponents: [Boolean]
  classNameComponents: [String]
  componentComponents: [String]
  arrowsComponents: [Arrows]
  slideComponents: [Slide]
  sliderComponents: [SliderComponent]
  tagLabelComponents: [TagLabelComponent]
  teaserComponents: [TeaserComponent]
  teaserBoxComponents: [TeaserBoxComponent]
  teaserRowComponents: [TeaserRowComponent]
  fullComponents: [Boolean]
  textMediaComponents: [TextMediaComponent]
  toggleComponents: [ToggleComponent]
  collapsibleBoxComponents: [CollapsibleBoxComponent]
  contactComponents: [ContactComponent]
  countUpComponents: [CountUpComponent]
  logoTilesComponents: [LogoTilesComponent]
  quoteComponents: [QuoteComponent]
  quotesSliderComponents: [QuotesSliderComponent]
  visualSlidePreviewComponents: [VisualSlidePreviewComponent]
  storytellingComponents: [StorytellingComponent]
  visualComponents: [VisualComponent]
  visualSliderComponents: [VisualSliderComponent]
}

"""Button: Component to display links and call-to-actions"""
type ButtonComponent implements ContentComponent {
  """Label: Text used on button"""
  label__634c: String

  """Button Style: Choose one of the styles from the list"""
  variant__c8d5: ButtonComponentVariant

  """Button Size: Choose a size between small, medium and large"""
  size__1735: ButtonComponentSize

  """
  Additional Classes: Add additional css classes that should be applied to the button
  """
  className__f69c: String
  icon__b287: IconComponent

  """Icon before button: Display icon before the button text"""
  iconBefore__ce4f: Boolean

  """Icon after button: Display icon after the button text"""
  iconAfter__9214: Boolean

  """
  'data-component' attribute: Overwrite the data-component to use for rendering
  """
  dataComponent__fb24: String

  """Fill Animation: Add fill animation on hover"""
  fillAnimation__a843: Boolean

  """Icon Animation: Add icon animation on hover"""
  iconAnimation__a42f: Boolean

  """'type' attribute: Select the type attribute for the button"""
  typeAttr__b95e: ButtonComponentTypeAttr

  """'value' attribute: Define a value attribute for the button"""
  value__ed44: String

  """'name' attribute: Define a name attribute for the button"""
  name__6a5d: String

  """'disabled' attribute: Set the disabled attribute for the button"""
  disabled__f1d0: Boolean

  """Internal type: Internal type for interface resolution"""
  type: String
}

interface ContentComponent {
  type: String
}

"""Button Style: Choose one of the styles from the list"""
enum ButtonComponentVariant {
  solid
  solid_inverted
  clear
  clear_inverted
  outline
  outline_inverted
}

"""Button Size: Choose a size between small, medium and large"""
enum ButtonComponentSize {
  small
  medium
  large
}

"""Icon: Icon"""
type IconComponent implements ContentComponent {
  """Icon identifier"""
  icon__dcfe: String

  """Aria role"""
  role__ea32: String

  """additional class"""
  className__251a: String

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""'type' attribute: Select the type attribute for the button"""
enum ButtonComponentTypeAttr {
  button
  submit
  reset
}

"""Content Box: Component to display content in a condensed, boxed form"""
type ContentBoxComponent implements ContentComponent {
  """
  Image ratio: Choose one of the set ratios, all ratios except 'none' stretch the image to 100% width
  """
  ratio__30c5: ContentBoxComponentRatio

  """
  Alignment: Choose an alignment for the box. For the image it only applies for a 'ratio' value of 'none'
  """
  alignement__7c67: ContentBoxComponentAlignement

  """
  Image source: Select an image to display inside the content box, at the top
  """
  image__b7d7: String

  """Topic: Topic for the content box. Displayed before the text, in bold"""
  topic__ed87: String

  """Text content: Text for the content box"""
  text__b5a1: String

  """Link: Content box link configuration"""
  link__4433: ContentBoxComponentLink

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""
Image ratio: Choose one of the set ratios, all ratios except 'none' stretch the image to 100% width
"""
enum ContentBoxComponentRatio {
  none
  VALUE_4_3
  VALUE_16_9
  VALUE_1_1
}

"""
Alignment: Choose an alignment for the box. For the image it only applies for a 'ratio' value of 'none'
"""
enum ContentBoxComponentAlignement {
  left
  center
  right
}

"""Link: Content box link configuration"""
type ContentBoxComponentLink {
  """Display link: Toggles visibility of the link"""
  enabled: Boolean
}

"""
Divider: Dividers bring clarity to a layout by grouping and dividing content in close proximity.
"""
type DividerComponent implements ContentComponent {
  """Style of the divider: Choose a variant for the divider"""
  variant__fdb0: DividerComponentVariant

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Style of the divider: Choose a variant for the divider"""
enum DividerComponentVariant {
  default
  accent
  dark
}

"""Headline: Headline"""
type HeadlineComponent implements ContentComponent {
  """Level: Select the headline level to use, or p alternatively"""
  level__503c: HeadlineComponentLevel

  """Alignment: Choose an alignment for the headline"""
  align__498d: HeadlineComponentAlign

  """Text: Text content for the headline"""
  content__3cc5: String

  """Subheadline: Text content for the optional subheadline"""
  subheadline__aa93: String

  """Bottom spacing: Add additional spacing to the bottom of the headline"""
  spaceAfter__6f7d: HeadlineComponentSpaceAfter

  """
  Page header: Set the headline as a page header, triggering special css treatment
  """
  pageHeader__5c3f: Boolean

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Level: Select the headline level to use, or p alternatively"""
enum HeadlineComponentLevel {
  h1
  h2
  h3
  h4
  h5
  p
}

"""Alignment: Choose an alignment for the headline"""
enum HeadlineComponentAlign {
  left
  center
  right
}

"""Bottom spacing: Add additional spacing to the bottom of the headline"""
enum HeadlineComponentSpaceAfter {
  none
  small
  large
}

"""Lazy Lightbox Image: Lazy Lightbox Image"""
type LightboxLazyImageComponent implements ContentComponent {
  """Thumbnail Source: Thumbnail Source"""
  thumb__64b3: String

  """Lightbox Image Source: Lightbox Image Source"""
  image__0dd8: String

  """Width: Width"""
  width__5f4a: Int

  """Height: height"""
  height__eeb9: Int

  """Hover Zoom Icon: Hover Zoom Icon"""
  zoomIcon__8de6: Boolean

  """Caption: Caption"""
  caption__dc74: String

  """Hide caption visually: Hide caption visually"""
  hideCaption__668c: Boolean

  """Gallery identifier: Gallery identifier"""
  gallery__d524: String

  """ID: ID"""
  id__5744: String

  """Additional Image Class: Additional Image Class"""
  class__b1f4: String

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Link Button: link-button"""
type LinkButtonComponent implements ContentComponent {
  """Label: Text used on button"""
  label__b988: String

  """Button Style: Choose one of the styles from the list"""
  variant__a43d: LinkButtonComponentVariant

  """Button Size: Choose a size between small, medium and large"""
  size__942c: LinkButtonComponentSize

  """
  Additional Classes: Add additional css classes that should be applied to the button
  """
  className__8726: String
  icon__157f: IconComponent

  """Icon before button: Display icon before the button text"""
  iconBefore__7991: Boolean

  """Icon after button: Display icon after the button text"""
  iconAfter__c8b6: Boolean

  """
  'data-component' attribute: Overwrite the data-component to use for rendering
  """
  dataComponent__8d9e: String

  """Fill Animation: Add fill animation on hover"""
  fillAnimation__2a89: Boolean

  """Icon Animation: Add icon animation on hover"""
  iconAnimation__9933: Boolean

  """Button href?: Link used for button"""
  href__11db: String

  """Open link in new Tab: Open link in new Tab"""
  newTab__dc35: Boolean

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Button Style: Choose one of the styles from the list"""
enum LinkButtonComponentVariant {
  solid
  solid_inverted
  clear
  clear_inverted
  outline
  outline_inverted
}

"""Button Size: Choose a size between small, medium and large"""
enum LinkButtonComponentSize {
  small
  medium
  large
}

"""Picture: Base component to display a picture"""
type PictureComponent implements ContentComponent {
  """Source: Picture source"""
  src__197b: String

  """Picture sourceset: Use a srcSet to display picture"""
  srcSet__866d: String

  """Alt text: Alt text to display for picture"""
  alt__1f75: String

  """Width: Width of the picture"""
  width__4691: Int

  """Height: Height of the picture"""
  height__23ff: Int

  """
  Additional Classes: Add additional css classes that should be applied to the button
  """
  className__a117: String

  """Id: Add id attribute to the image"""
  id__9f67: String

  """'itemprop' attribute: Define an itemprop attribute for the picture"""
  itemProp__ba17: String

  """'style' attribute: Define a style attribute for the picture"""
  style__ccee: String

  """Object fit: Select a value for the picture object fit"""
  objectFit__1269: PictureComponentObjectFit

  """Noscript: Render noscript fallback"""
  noscript__ec26: Boolean

  """Lazy: Load the picture lazily"""
  lazy__55bf: Boolean

  """Sources: Additional sources. This will result in a 'picture'-Element"""
  sources__a109: [PictureComponentSources!]

  """'class' attribute: Set additional class(es) to the picture"""
  pictureClassName__9f3e: String

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Object fit: Select a value for the picture object fit"""
enum PictureComponentObjectFit {
  contain
  cover
  fill
  none
  scale_down
}

type PictureComponentSources {
  """Picture sourceset: Use a srcSet to display picture"""
  srcSet: String

  """TODO MEDIA TITLE: TODO MEDIA DESCRIPTION"""
  media: String

  """TODO TYPE TITLE: TODO TYPE DESCRIPTION"""
  type: String
}

type Container {
  width: ContainerWidth
  gutter: ContainerGutter
  mode: ContainerMode
  content: [ContainerContent!]
}

enum ContainerWidth {
  full
  max
  wide
  default
  narrow
}

enum ContainerGutter {
  large
  default
  small
  none
}

enum ContainerMode {
  default
  tile
  list
}

union ContainerContent = QuotesSliderComponent | LinkButtonComponent | ToggleComponent | ButtonComponent | TagLabelComponent | VisualComponent | QuoteComponent | VisualSliderComponent | ContactComponent | StorytellingComponent | CollapsibleBoxComponent | CountUpComponent | ContentBoxComponent | HeadlineComponent | TextMediaComponent | TeaserBoxComponent | LogoTilesComponent | TeaserRowComponent

"""Quotes Slider"""
type QuotesSliderComponent implements ContentComponent {
  slides__d47f: [QuoteComponent!]

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Quote: Component to display a rich quote"""
type QuoteComponent implements ContentComponent {
  """Image source: Select an image to display inside the quote, to the left"""
  image__f09b: String

  """Text content: Copy text for the element"""
  text__b65e: String

  """Source: Optionally display the source for the quote"""
  source__86ac: String

  """Date: Optionally display a date for the quote"""
  date__3f4e: String

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Toggle Switch: Toggle Switch"""
type ToggleComponent implements ContentComponent {
  """ID: Input id"""
  id__788a: String

  """Name: Name"""
  name__f2d9: String

  """Checked: Toggle is checked"""
  checked__90a6: Boolean

  """Disabled: Toggle is disabled"""
  disabled__d11c: Boolean

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Tag Label: Component to render a pill / tag / label"""
type TagLabelComponent implements ContentComponent {
  """Label: Text to display inside tag label"""
  label__7246: String

  """Size: Choose a size to scale the tag label up or down"""
  size__d93f: TagLabelComponentSize

  """Link Target: Set optional href to link the tag"""
  link__6ced: String

  """Removable: Choose whether the element is removable or not"""
  removable__7eaf: Boolean

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Size: Choose a size to scale the tag label up or down"""
enum TagLabelComponentSize {
  s
  m
  l
}

"""Visual: visual"""
type VisualComponent implements ContentComponent {
  """Height"""
  height__f2ca: VisualComponentHeight

  """Media Wrapper: Wrapper for all media types"""
  media__8f99: VisualComponentMedia

  """Grid layer: Enable grid layer"""
  overlay__6df1: Boolean

  """Text box: Content and style configuration for the text box"""
  box__5bd7: VisualComponentBox

  """Custom background color: Custom css background color"""
  backgroundColor__4ca8: String

  """Inbox: The text box is in front of the image on small screens"""
  inbox__8206: Boolean

  """Skip Button: Show skip button"""
  skipButton__bf9d: Boolean

  """Additional Classes"""
  className__d3dc: String

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Height"""
enum VisualComponentHeight {
  small
  default
  fullImage
  fullScreen
}

"""Media Wrapper: Wrapper for all media types"""
type VisualComponentMedia {
  """Media Type: Choose a media type between image, video and none"""
  mode: VisualComponentMediaMode

  """
  Background image: Sources of background images for different screen sizes
  """
  image: VisualComponentMediaImage

  """
  Background video: Sources of background videos for different screen sizes
  """
  video: VisualComponentMediaVideo
}

"""Media Type: Choose a media type between image, video and none"""
enum VisualComponentMediaMode {
  image
  video
  none
}

"""
Background image: Sources of background images for different screen sizes
"""
type VisualComponentMediaImage {
  """Mobile image source: Background image source for small screens"""
  srcMobile: String!

  """Tablet image source: Background image source for medium screens"""
  srcTablet: String!

  """Desktop image source: Background image source for large screens"""
  srcDesktop: String!

  """Image indent: Choose to indent the image horizontally on small screens"""
  indent: VisualComponentMediaImageIndent

  """Alt text: Alt text to display for picture"""
  alt: String
}

"""Image indent: Choose to indent the image horizontally on small screens"""
enum VisualComponentMediaImageIndent {
  none
  left
  right
}

"""
Background video: Sources of background videos for different screen sizes
"""
type VisualComponentMediaVideo {
  """Mobile video source: Background video source for small screens"""
  srcMobile: String!

  """Tablet video source: Background video source for medium screens"""
  srcTablet: String!

  """Desktop video source: Background video source for large screens"""
  srcDesktop: String!
}

"""Text box: Content and style configuration for the text box"""
type VisualComponentBox {
  """Display box: Toggles visibility of the box"""
  enabled: Boolean

  """Headline: Text box headline"""
  headline: String

  """Text: Text box copy text"""
  text: String

  """Link: Text box link configuration"""
  link: VisualComponentBoxLink

  """Indent: The text box is aligned inside the content grid"""
  indent: Boolean

  """
  Horizontal orientation: Horizontal orientation of the box inside the keyvisual
  """
  horizontal: VisualComponentBoxHorizontal

  """
  Vertical orientation: Vertical orientation of the box inside the keyvisual
  """
  vertical: VisualComponentBoxVertical

  """Style of the box: Choose a style for the box"""
  background: VisualComponentBoxBackground
}

"""Link: Text box link configuration"""
type VisualComponentBoxLink {
  """Display Link: Toggles visibility of the link"""
  enabled: Boolean
}

"""
Horizontal orientation: Horizontal orientation of the box inside the keyvisual
"""
enum VisualComponentBoxHorizontal {
  left
  center
  right
}

"""
Vertical orientation: Vertical orientation of the box inside the keyvisual
"""
enum VisualComponentBoxVertical {
  top
  center
  bottom
}

"""Style of the box: Choose a style for the box"""
enum VisualComponentBoxBackground {
  default
  light
  transparent
}

"""Visual Slider: Visual Slider"""
type VisualSliderComponent implements ContentComponent {
  autoplay__e333: Boolean
  slides__e195: [VisualSliderComponentSlides!]

  """Internal type: Internal type for interface resolution"""
  type: String
}

type VisualSliderComponentSlides {
  """Height"""
  height__f2ca: VisualSliderComponentSlidesHeight

  """Media Wrapper: Wrapper for all media types"""
  media__8f99: VisualSliderComponentSlidesMedia

  """Grid layer: Enable grid layer"""
  overlay__6df1: Boolean

  """Text box: Content and style configuration for the text box"""
  box__5bd7: VisualSliderComponentSlidesBox

  """Custom background color: Custom css background color"""
  backgroundColor__4ca8: String

  """Inbox: The text box is in front of the image on small screens"""
  inbox__8206: Boolean

  """Skip Button: Show skip button"""
  skipButton__bf9d: Boolean

  """Additional Classes"""
  className__d3dc: String

  """Internal type: Internal type for interface resolution"""
  type: String

  """Slide preview label: preview label"""
  label: String
}

"""Height"""
enum VisualSliderComponentSlidesHeight {
  small
  default
  fullImage
  fullScreen
}

"""Media Wrapper: Wrapper for all media types"""
type VisualSliderComponentSlidesMedia {
  """Media Type: Choose a media type between image, video and none"""
  mode: VisualSliderComponentSlidesMediaMode

  """
  Background image: Sources of background images for different screen sizes
  """
  image: VisualSliderComponentSlidesMediaImage

  """
  Background video: Sources of background videos for different screen sizes
  """
  video: VisualSliderComponentSlidesMediaVideo
}

"""Media Type: Choose a media type between image, video and none"""
enum VisualSliderComponentSlidesMediaMode {
  image
  video
  none
}

"""
Background image: Sources of background images for different screen sizes
"""
type VisualSliderComponentSlidesMediaImage {
  """Mobile image source: Background image source for small screens"""
  srcMobile: String!

  """Tablet image source: Background image source for medium screens"""
  srcTablet: String!

  """Desktop image source: Background image source for large screens"""
  srcDesktop: String!

  """Image indent: Choose to indent the image horizontally on small screens"""
  indent: VisualSliderComponentSlidesMediaImageIndent

  """Alt text: Alt text to display for picture"""
  alt: String
}

"""Image indent: Choose to indent the image horizontally on small screens"""
enum VisualSliderComponentSlidesMediaImageIndent {
  none
  left
  right
}

"""
Background video: Sources of background videos for different screen sizes
"""
type VisualSliderComponentSlidesMediaVideo {
  """Mobile video source: Background video source for small screens"""
  srcMobile: String!

  """Tablet video source: Background video source for medium screens"""
  srcTablet: String!

  """Desktop video source: Background video source for large screens"""
  srcDesktop: String!
}

"""Text box: Content and style configuration for the text box"""
type VisualSliderComponentSlidesBox {
  """Display box: Toggles visibility of the box"""
  enabled: Boolean

  """Headline: Text box headline"""
  headline: String

  """Text: Text box copy text"""
  text: String

  """Link: Text box link configuration"""
  link: VisualSliderComponentSlidesBoxLink

  """Indent: The text box is aligned inside the content grid"""
  indent: Boolean

  """
  Horizontal orientation: Horizontal orientation of the box inside the keyvisual
  """
  horizontal: VisualSliderComponentSlidesBoxHorizontal

  """
  Vertical orientation: Vertical orientation of the box inside the keyvisual
  """
  vertical: VisualSliderComponentSlidesBoxVertical

  """Style of the box: Choose a style for the box"""
  background: VisualSliderComponentSlidesBoxBackground
}

"""Link: Text box link configuration"""
type VisualSliderComponentSlidesBoxLink {
  """Display Link: Toggles visibility of the link"""
  enabled: Boolean
}

"""
Horizontal orientation: Horizontal orientation of the box inside the keyvisual
"""
enum VisualSliderComponentSlidesBoxHorizontal {
  left
  center
  right
}

"""
Vertical orientation: Vertical orientation of the box inside the keyvisual
"""
enum VisualSliderComponentSlidesBoxVertical {
  top
  center
  bottom
}

"""Style of the box: Choose a style for the box"""
enum VisualSliderComponentSlidesBoxBackground {
  default
  light
  transparent
}

"""Contact: Component to show contact information"""
type ContactComponent implements ContentComponent {
  image__a463: PictureComponent

  """Title: Name, company name, etc."""
  title__5426: String

  """Subtitle: Position, profession, department, location, etc."""
  subtitle__92ac: String

  """Phone number"""
  phone__520b: String

  """Email address"""
  email__70d5: String

  """Copy text"""
  copy__cda3: String

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""
Storytelling: Component to present rich combinations of text and media, best used sequentially
"""
type StorytellingComponent implements ContentComponent {
  """Background image: Background image for the whole element"""
  backgroundImage__cb66: String

  """Background color: Background color for the whole element"""
  backgroundColor__291a: String

  """Full size image: Display a full sized version of the image"""
  full__be79: Boolean

  """Image: Image displayed alongside the text content"""
  image__cc97: StorytellingComponentImage

  """Text box: Text content to display"""
  box__5f7a: StorytellingComponentBox

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Image: Image displayed alongside the text content"""
type StorytellingComponentImage {
  """Image source: Image source to use"""
  source: String

  """
  Image aspect ratio: Select an aspect ratio to use for cropping and displaying the image
  """
  ratio: StorytellingComponentImageRatio

  """Image vertical alignment: Select a vertical alignment for the image"""
  vAlign: StorytellingComponentImageVAlign

  """
  Image horizontal alignment: Select a horizontal alignment for the image
  """
  hAlign: StorytellingComponentImageHAlign

  """Order: Choose what comes first on mobile and desktop: image or text"""
  order: StorytellingComponentImageOrder
}

"""
Image aspect ratio: Select an aspect ratio to use for cropping and displaying the image
"""
enum StorytellingComponentImageRatio {
  VALUE_4_3
  VALUE_3_2
  VALUE_16_9
  VALUE_1_1
  none
}

"""Image vertical alignment: Select a vertical alignment for the image"""
enum StorytellingComponentImageVAlign {
  center
  top
  top_edge
  bottom
  bottom_edge
}

"""
Image horizontal alignment: Select a horizontal alignment for the image
"""
enum StorytellingComponentImageHAlign {
  center
  left
  left_edge
  right
  right_edge
}

"""Order: Choose what comes first on mobile and desktop: image or text"""
type StorytellingComponentImageOrder {
  """
  Mobile image after text: Switch to displaying the image after the text on mobile
  """
  mobileImageLast: Boolean

  """
  Desktop image after text: Switch to displaying the image after the text on desktop
  """
  desktopImageLast: Boolean
}

"""Text box: Text content to display"""
type StorytellingComponentBox {
  headline: HeadlineComponent

  """Text: Text content to display inside the element"""
  text: String

  """Text alignment: Switch text alignment between left and center"""
  textAlign: StorytellingComponentBoxTextAlign

  """Text color: Overwrite the color to use for the text content"""
  textColor: String

  """Box vertical alignment: Select a vertical alignment for the box"""
  vAlign: StorytellingComponentBoxVAlign

  """Box horizontal alignment: Select a horizontal alignment for the box"""
  hAlign: StorytellingComponentBoxHAlign
  link: LinkButtonComponent
}

"""Text alignment: Switch text alignment between left and center"""
enum StorytellingComponentBoxTextAlign {
  left
  center
}

"""Box vertical alignment: Select a vertical alignment for the box"""
enum StorytellingComponentBoxVAlign {
  center
  top
  bottom
}

"""Box horizontal alignment: Select a horizontal alignment for the box"""
enum StorytellingComponentBoxHAlign {
  center
  left
  right
}

"""Collapsible Box: Component to conditionally show additional info"""
type CollapsibleBoxComponent implements ContentComponent {
  """
  Summary text for the collapsible: Include the text for the collapsible that should be visible before opening
  """
  summary__919d: String

  """
  Content of the collapsible: Include the text for the collapsible that should be visible after opening
  """
  text__9abc: String

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Count Up: Component to to increase a number up to a final value"""
type CountUpComponent implements ContentComponent {
  """Number: Final number to count to"""
  to__fc5f: Int
  icon__ed13: IconComponent

  """Topic: Topic for the count-up box. Displayed before the text, in bold"""
  topic__b6c8: String

  """Text content: Copy text for the element"""
  text__0f41: String
  link__ac78: LinkButtonComponent

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Text Media: Component to display copy text, including media"""
type TextMediaComponent implements ContentComponent {
  """Text content: Copy text for the element"""
  text__117a: String

  """Media alignment: In relation to the text content"""
  mediaAlignment__0da3: TextMediaComponentMediaAlignment

  """Media: Collection of media items to display"""
  media__d3b5: [TextMediaComponentMedia!]

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Media alignment: In relation to the text content"""
enum TextMediaComponentMediaAlignment {
  above_left
  above_center
  above_right
  beside_left
  beside_right
  intext_left
  intext_right
  below_left
  below_center
  below_right
}

union TextMediaComponentMedia = TextMediaComponentMedia0 | TextMediaComponentMedia1 | TextMediaComponentMedia2

type TextMediaComponentMedia0 {
  """Video: Video item to display"""
  video: TextMediaComponentMedia0Video
  full: Boolean
}

"""Video: Video item to display"""
type TextMediaComponentMedia0Video {
  """Source: Url (mp4) for the video to display"""
  src: String!

  """Embedded (iframe): Use an iframe embed"""
  iframe: Boolean

  """Video title: Title to use for the video"""
  title: String

  """Width: Width of the video"""
  width: Int!

  """Height: Height of the video"""
  height: Int!
}

type TextMediaComponentMedia1 {
  image: PictureComponent
  full: Boolean
}

type TextMediaComponentMedia2 {
  lightboxImage: LightboxLazyImageComponent
  full: Boolean
}

"""Teaser Box: Component to tease external content"""
type TeaserBoxComponent implements ContentComponent {
  """Topic: Topic for the teaser box. Displayed before the text, in bold"""
  topic__8a0d: String

  """Text content: Text for the teaser box"""
  text__da70: String

  """Dark variant: Optionally use this to apply a dark variant to the box"""
  darkStyle__b59c: Boolean
  link__884d: TeaserBoxComponentLink

  """
  Image source: Select an image to display inside the teaser box, at the top
  """
  image__5eb9: String

  """Image ratio: Choose the ratio used to crop and display the image"""
  ratio__d62c: TeaserBoxComponentRatio

  """Image spacing: Optionally add inner spacing to the displayed image"""
  imageSpacing__2828: Boolean

  """Internal type: Internal type for interface resolution"""
  type: String
}

type TeaserBoxComponentLink {
  """Hide link: Hides the link. The box as a whole keeps being clickable"""
  hidden: Boolean
}

"""Image ratio: Choose the ratio used to crop and display the image"""
enum TeaserBoxComponentRatio {
  VALUE_4_3
  VALUE_16_9
  VALUE_1_1
}

"""Logo Tiles: Component to list logos or seals"""
type LogoTilesComponent implements ContentComponent {
  """Logos"""
  logos__8ff6: [PictureComponent!]

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Teaser Row: Component to tease external content"""
type TeaserRowComponent implements ContentComponent {
  """Topic: Topic for the teaser box. Displayed before the text, in bold"""
  topic__eb4b: String

  """Text content: Text for the teaser box"""
  text__003d: String

  """Dark variant: Optionally use this to apply a dark variant to the box"""
  darkStyle__4848: Boolean
  link__2757: TeaserRowComponentLink

  """Internal type: Internal type for interface resolution"""
  type: String
}

type TeaserRowComponentLink {
  """Hide link: Hides the link. The box as a whole keeps being clickable"""
  hidden: Boolean
}

"""Section"""
type SectionComponent {
  width__c976: SectionComponentWidth
  gutter__7060: SectionComponentGutter
  mode__123d: SectionComponentMode
  content__2cb4: [SectionComponentContent!]
  background__44d0: SectionComponentBackground
  spaceBefore__8a4a: SectionComponentSpaceBefore
  spaceAfter__9774: SectionComponentSpaceAfter
  headline__77a3: HeadlineComponent
}

enum SectionComponentWidth {
  full
  max
  wide
  default
  narrow
}

enum SectionComponentGutter {
  large
  default
  small
  none
}

enum SectionComponentMode {
  default
  tile
  list
}

union SectionComponentContent = QuotesSliderComponent | LinkButtonComponent | ToggleComponent | ButtonComponent | TagLabelComponent | VisualComponent | QuoteComponent | VisualSliderComponent | ContactComponent | StorytellingComponent | CollapsibleBoxComponent | CountUpComponent | ContentBoxComponent | HeadlineComponent | TextMediaComponent | TeaserBoxComponent | LogoTilesComponent | TeaserRowComponent

enum SectionComponentBackground {
  default
  accent
  dark
}

enum SectionComponentSpaceBefore {
  default
  small
  none
}

enum SectionComponentSpaceAfter {
  default
  small
  none
}

"""
Arrows: Add arrows on the left and right to navigate to next or previous slide
"""
enum Arrows {
  none
  outer
  inner
}

"""Slide: Slide"""
type Slide {
  """slide component: slide component"""
  slideComponent: String!

  """preview component: preview component"""
  previewComponent: String!

  """preview label: preview label"""
  previewLabel: String!
}

"""Slider: Slider"""
type SliderComponent implements ContentComponent {
  autoplay__5854: Boolean
  className__6e21: String
  component__655b: String
  arrows__f98f: Arrows

  """Internal type: Internal type for interface resolution"""
  type: String
}

"""Teaser: Component to tease external content"""
type TeaserComponent implements ContentComponent {
  """Topic: Topic for the teaser box. Displayed before the text, in bold"""
  topic__d049: String

  """Text content: Text for the teaser box"""
  text__cc83: String

  """Dark variant: Optionally use this to apply a dark variant to the box"""
  darkStyle__d107: Boolean
  link__a055: TeaserComponentLink

  """Internal type: Internal type for interface resolution"""
  type: String
}

type TeaserComponentLink {
  """Hide link: Hides the link. The box as a whole keeps being clickable"""
  hidden: Boolean
}

"""Visual Slide Preview: Visual slide preview"""
type VisualSlidePreviewComponent implements ContentComponent {
  """Preview label: Preview label for slide in slider"""
  previewLabel__516c: String

  """Internal type: Internal type for interface resolution"""
  type: String
}
